// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/14/2018 07:41:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] acc;
reg alu_add;
reg alu_and;
reg alu_srl;
reg alu_sub;
reg [7:0] mdr;
reg mdr_or_r;
reg [7:0] rrr;
reg rst;
// wires                                               
wire [7:0] alu_out;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.acc(acc),
	.alu_add(alu_add),
	.alu_and(alu_and),
	.alu_out(alu_out),
	.alu_srl(alu_srl),
	.alu_sub(alu_sub),
	.mdr(mdr),
	.mdr_or_r(mdr_or_r),
	.rrr(rrr),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// alu_srl
initial
begin
	alu_srl = 1'b0;
end 

// alu_sub
initial
begin
	alu_sub = 1'b0;
end 

// alu_add
initial
begin
	alu_add = 1'b1;
end 

// alu_and
initial
begin
	alu_and = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// mdr_or_r
initial
begin
	mdr_or_r = 1'b0;
end 
// mdr[ 7 ]
initial
begin
	mdr[7] = 1'b0;
end 
// mdr[ 6 ]
initial
begin
	mdr[6] = 1'b0;
end 
// mdr[ 5 ]
initial
begin
	mdr[5] = 1'b1;
end 
// mdr[ 4 ]
initial
begin
	mdr[4] = 1'b0;
end 
// mdr[ 3 ]
initial
begin
	mdr[3] = 1'b0;
end 
// mdr[ 2 ]
initial
begin
	mdr[2] = 1'b0;
end 
// mdr[ 1 ]
initial
begin
	mdr[1] = 1'b0;
end 
// mdr[ 0 ]
initial
begin
	mdr[0] = 1'b0;
end 
// acc[ 7 ]
initial
begin
	acc[7] = 1'b0;
end 
// acc[ 6 ]
initial
begin
	acc[6] = 1'b0;
end 
// acc[ 5 ]
initial
begin
	acc[5] = 1'b0;
end 
// acc[ 4 ]
initial
begin
	acc[4] = 1'b0;
end 
// acc[ 3 ]
initial
begin
	acc[3] = 1'b1;
end 
// acc[ 2 ]
initial
begin
	acc[2] = 1'b0;
end 
// acc[ 1 ]
initial
begin
	acc[1] = 1'b0;
end 
// acc[ 0 ]
initial
begin
	acc[0] = 1'b0;
end 
// rrr[ 7 ]
initial
begin
	rrr[7] = 1'b0;
end 
// rrr[ 6 ]
initial
begin
	rrr[6] = 1'b0;
end 
// rrr[ 5 ]
initial
begin
	rrr[5] = 1'b0;
end 
// rrr[ 4 ]
initial
begin
	rrr[4] = 1'b0;
end 
// rrr[ 3 ]
initial
begin
	rrr[3] = 1'b0;
end 
// rrr[ 2 ]
initial
begin
	rrr[2] = 1'b0;
end 
// rrr[ 1 ]
initial
begin
	rrr[1] = 1'b1;
end 
// rrr[ 0 ]
initial
begin
	rrr[0] = 1'b0;
end 
endmodule

